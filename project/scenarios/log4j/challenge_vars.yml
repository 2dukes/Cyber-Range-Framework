dns:
  - domain: example-domain.ui.com
    machine: vuln_service
    internal:
      network: dmz_net
    external:
      network: dmz_net
  # - domain: test1.com
  #   machine: edge_router
  #   internal:
  #     network: dmz_net
  #   external:
  #     network: external_net

vulnerables:
  images:
    - name: unifi_log4j
      path: scenarios/log4j
      dockerfile: Dockerfile.alpine.mongo
      args:
        VERSION: "6.4.54"
    - name: reverse_proxy
      path: reverse_proxy       
        
  machines:
    - name: vuln_service
      image: unifi_log4j
      group:
        - custom_machines
      dns_server: true
      networks:
        - name: dmz_net
          ipv4_address: 172.{{ networks.dmz_net.random_byte }}.0.30
      volumes:
        - "{{ playbook_dir }}/scenarios/log4j/unifi-certs:/usr/lib/unifi/cert"
      vars:
        username: test_user
        password: test_password
        email: admin@hotmail.com

    - name: reverse_proxy1
      image: reverse_proxy
      group:
        - reverse_proxies
      dns_server: true
      networks:
        - name: dmz_net
          ipv4_address: 172.{{ networks.dmz_net.random_byte }}.0.40
      vars:
        domain: test1.com
        targets: 
          - name: vuln_service
            network: dmz_net
            port: 8443
          - name: vuln_service
            network: dmz_net
            port: 8445

    # - name: reverse_proxy2
    #   image: reverse_proxy
    #   group:
    #     - reverse_proxies
    #   dns_server: true
    #   networks:
    #     - name: dmz_net
    #       ipv4_address: 172.{{ networks.dmz_net.random_byte }}.0.41
    #   vars:
    #     domain: test2.com
    #     targets: 
    #       - name: vuln_service
    #         network: dmz_net
    #         port: 8444

setup:
  machines:
    - name: attacker_machine
      setup: "{{ playbook_dir }}/scenarios/log4j/setup/*.j2"
